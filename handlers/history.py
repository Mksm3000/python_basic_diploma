from json import loads

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config_data.config import DEFAULT_COMMANDS
from data.database import show_tables, show_hotels_found
from keyboards.inline import hisory_kb
from loader import dp
from states.user_state import UsersStates


@dp.message_handler(commands=['history'])
async def history_list(message: types.Message, state: FSMContext) -> None:
    """
    –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É 'history'.
    –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ–∏—Å–∫–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'history'.
    """
    async with state.proxy() as data:
        if not data.get('user_uniq_id'):
            data['user_uniq_id'] = message.from_user.id

        user_uniq_id = data['user_uniq_id']
        result = await show_tables(user_uniq_id)

    if len(result) == 0:
        await message.answer(text=f'<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:{DEFAULT_COMMANDS}',
                             parse_mode='HTML')
        await state.finish()
    else:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞:',
                             reply_markup=hisory_kb(result))
        await state.set_state(state=UsersStates.history)


@dp.callback_query_handler(lambda callback: callback.data.startswith("row_"), state=UsersStates.history)
async def callback_history_row(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    Nista
    """
    row_num = callback.data.split("row_")[1]
    temp_tuple = await show_hotels_found(row_num)

    if len(temp_tuple) != 0:
        command, data = temp_tuple
        result = loads(data)
        text = (f"üìç<b>–ì–æ—Ä–æ–¥:</b> {result[0]['destination']}\n"
                f"üìÜ<b>–ó–∞–µ–∑–¥\–≤—ã–µ–∑–¥:</b> {result[0]['checkIn']} \ {result[0]['checkOut']}\n"
                f"üîé<b>–£—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞:</b> {result[0]['sort_by']}\n"
                f"\n")

        for element in result:
            text_temp = (f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è:</b> {element['name']}\n"
                         f"<b>–¶–µ–Ω–∞ –∑–∞ 1 –Ω–æ—á—å:</b> {element['price']}\n"
                         f"<b>–¶–µ–Ω–∞ –æ–±—â–∞—è:</b> {element['price_total']}\n"
                         f"<b>–†–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è:</b> {element['score']}/10\n"
                         f"<b>–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {element['total']}\n"
                         f"<b>–°—Å—ã–ª–∫–∞:</b> https://www.hotels.com/h{element['hotel_id']}.Hotel-Information\n")
            if command == '/best_deal':
                text_temp += f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞, –∫–º:</b> {element['distance']}\n"

            text += text_temp + '\n'

        keyboard = InlineKeyboardMarkup()
        button = InlineKeyboardButton(text=f'‚úÖ–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚úÖ', callback_data='cancel_show')
        keyboard.add(button)

        await callback.message.answer(text=text,
                                      parse_mode='HTML',
                                      reply_markup=keyboard)
        await state.set_state(state=UsersStates.history)

    else:
        await callback.message.answer(text=f"‚ÄºÔ∏è–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!‚ÄºÔ∏è\n"
                                           f"–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.\n"
                                           f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—É. {DEFAULT_COMMANDS}")
        await state.finish()
